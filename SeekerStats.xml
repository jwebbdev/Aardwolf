<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, September 22, 2024, 1:17 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "SeekerStats" generated by Plugin Wizard -->

<muclient>
<plugin
   name="SeekerStats"
   author="Kindahlin"
   id="e75d30643b7e032323a60032"
   language="Lua"
   purpose="Grab Seeker Stats"
   save_state="y"
   date_written="2024-09-22 13:16:41"
   requires="5.07"
   version="1.1"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{seekers_donated}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_donated", 1)</send>
  </trigger>
  <trigger
   group="seekers_triggers"
   match="^(|\n|Compact mode set\.|You will no longer see prompts\.|You will now see prompts\.|Compact mode removed\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   group="seekers_donated"
   match="^\s+(\d+)\s+(?<name>\w+)\s+(?<rank>\w+)\s+(\d+)\s+(?<gold>[0-9|,]+)\s+(?<qp_donated>[0-9|,]+)\s+([0-9|,]+)$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="on_donation_capture"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   group="seekers_donated"
   match="^(  Clan roster for The Seekers - sorted by Gold Donated\.|No. Name         Current Rank       Lvl       Donated Qp Donated      Tax Paid  |--- ------------ ------------------ --- ------------- ---------- -------------|\d+ members counted\.)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{/seekers_donated}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_donated", 0)</send>
  </trigger>

  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{/seekers_explored}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_explored", 0)</send>
  </trigger>
  <trigger
   group="seekers_explored"
   match="^\s+(\d+)\)\s+(?<name>\w+)\s+(\w+)\s+(?<total_levels>\d+)\s+(?<explored>\d+)\s+(?<explored_percent>[0-9|\.]+)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
   script="on_explored_capture"
  >
  </trigger>
  <trigger
   group="seekers_explored"
   match="^(                Aardwolf rankings by Rooms Explored\. |Num    Name         Clan         Level Rooms Explored  Percent of Mud|-----  ------------ ----------- ------ --------------  ---------------)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{seekers_explored}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_explored", 1)</send>
  </trigger>

  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{seekers_powerups}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_powerups", 1)</send>
  </trigger>
  <trigger
   group="seekers_powerups"
   match="^\s+(\d+)\)\s+(?<name>\w+)\s+(\w+)\s+(\d+)\s+(?<total_qp>\d+)\s+(\d+)\s+(\d+)\s+(?<total_pup>\d+)\s+(\d+)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
   script="on_powerups_capture"
  >
  </trigger>
  <trigger
   group="seekers_powerups"
   match="^(                Aardwolf rankings by Powerups \(Total\)\. |                                                                   - Power ups -|Num    Name         Clan         Level Total Qp Mob Kills Deaths    Total     Mort |-----  ------------ ----------- ------ -------- --------- ------ -------- --------)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{/seekers_powerups}"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("seekers_powerups", 0)</send>
  </trigger>

  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{/seekers_quests}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
   script="on_quests_end"
  >
  </trigger>
  <trigger
   group="seekers_quests"
   match="^(                Aardwolf rankings by Quests Completed\. |Num    Name         Clan         Level Quests Total Qp Gquests Campaigns|-----  ------------ ----------- ------ ------ -------- ------- ---------)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   group="seekers_quests"
   match="^\s+(\d+)\)\s+(?<name>\w+)\s+(\w+)\s+(\d+)\s+(?<total_quests>\d+)\s+(\d+)\s+(?<total_gqs>\d+)\s+(?<total_cps>\d+)$"
   regexp="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
   script="on_quests_capture"
  >
  </trigger>
  <trigger
   enabled="y"
   group="seekers_triggers"
   match="{seekers_quests}"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>EnableTriggerGroup("seekers_quests", 1)</send>
  </trigger>
</triggers>

<!--  Aliases  -->
<aliases>
<alias
   match="^seekrank (\w+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   echo_alias="y"
   omit_from_output="y"
   script="on_seekrank_playername_parser"
  >
</alias>
<alias
   match="^seekrank (\w+) (\w+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   echo_alias="y"
   omit_from_output="y"
   script="on_seekrank_playername_parser"
  >
</alias>
<alias
   match="^seekrank (\w+) (\w+) (\d+) (\d+) (\d+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   echo_alias="y"
   omit_from_output="y"
   script="on_seekrank_playername_parser"
  >
</alias>
<alias
   match="^seekrank (\w+) (\w+) (\w+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   echo_alias="y"
   omit_from_output="y"
   script="on_seekrank_playername_parser"
  >
</alias>
<alias
   echo_alias="y"
   omit_from_output="y"
   match="seekrank dump"
   enabled="y"
   regexp="y"
   sequence="100"
   script="display_stats"
></alias>
</aliases>

<script>
<![CDATA[
--[[
   -- Description --
--]]

-- CODE SECTION --

require 'aardwolf_colors'

ranks = {
  ["Student"] = 1,
  ["Scribe"] = 2,
  ["Explorer"] = 3,
  ["Teacher"] = 4,
  ["Scholar"] = 5,
  ["Sage"] = 6,
  ["Elder"] = 7
}

rank_points_needed = {
  0,
  400,
  1050,
  1650,
  2150,
  2650,
  3150
}

join_dates = {
  ["Adele"] = "2008-11-27",
  ["Ani"] = "2012-01-15",
  ["Caralah"] = "2007-06-19",
  ["ElFeneri"] = "2011-11-03",
  ["Emmalee"] = "2011-12-18",
  ["Gilduran"] = "2012-06-04",
  ["Nubeiro"] = "2012-02-19",
  ["Ozzy"] = "2003-11-15",
  ["PowerSlave"] = "2013-04-10",
  ["Foxin"] = "2013-02-24",
  ["Seyar"] = "2011-12-09",
  ["Shaylah"] = "2007-10-14",
  ["Skgubza"] = "2013-05-04",
  ["Soltair"] = "2006-03-18",
  ["Stargate"] = "2007-03-02",
  ["StarsOscar"] = "2012-07-18",
  ["Taokan"] = "2012-06-04",
  ["Tirra"] = "2011-12-12",
  ["Zethien"] = "2009-06-24",
  ["Curiousj"] = "2013-07-01",
  ["Ulrich"] = "2013-07-02",
  ["RandAlthor"] = "2013-07-10",
  ["Xarfin"] = "2013-08-04",
  ["WillowSong"] = "2014-01-13",
  ["Ragtime"] = "2015-01-16",
  ["Kalzar"] = "2014-04-22",
  ["Leil"] = "2014-05-29",
  ["Urru"] = "2015-05-11",
  ["Bellon"] = "2016-01-12",
  ["Gorsk"] = "2016-12-11",
  ["Exa"] = "2017-01-03",
  ["Malark"] = "2016-04-30",
  ["Sochen"] = "2017-04-11",
  ["Questioner"] = "2017-06-16",
  ["Ziv"] = "2017-06-30",
  ["Geji"] = "2017-12-27",
  ["ShadowDragon"] = "2020-10-01",
  ["Graciella"] = "2021-02-20",
  ["Scars"] = "2022-12-01",
  ["Chekhu"] = "2022-12-27",
  ["Chimeishio"] = "2023-07-22",
  ["Amya"] = "2023-08-06",
  ["Vader"] = "2023-10-07",
  ["Inertia"] = "2024-01-07",
  ["Anssett"] = "2024-01-30",
  ["Haddin"] = "2024-02-06",
  ["Keman"] = "2024-02-14",
  ["Sletch"] = "2024-06-02",
  ["Kindahlin"] = "2024-07-25",
  ["Luathas"] = "2024-10-10",
}

title_color = "@W"
default_color = "@w"
seperator_color = "@W"
stat_color = "@Y"
value_color = "@W"
name_color = "@C"
rank_color = "@Y"

last_updated = nil
post_refresh_command = nil
seeker_stats = {}

function on_quests_end()
  EnableTriggerGroup("seekers_quests", 0)
  EnableTriggerGroup("seekers_triggers", 0)
  if post_refresh_command ~= nil then
    Execute(post_refresh_command)
    post_refresh_command = nil
  end
end

function get_ordered_stats()
  local ordered_stats = {}
  for name, stats in pairs(seeker_stats) do
	table.insert(ordered_stats,
	  {
		name = name, 
		rank = stats.rank or nil,
		rank_points = stats.rank_points or nil,
		rank_points_needed = stats.rank_points_needed or nil,
		gold = stats.gold or nil,
		gold_points = stats.gold_points or nil,
		qp_donated = stats.qp_donated or nil,
		qp_points = stats.qp_points or nil,
		total_levels = stats.total_levels or nil,
		level_points = stats.level_points or nil,
		explored_percent = stats.explored_percent or nil,
		explored_points = stats.explored_points or nil,
		total_pup = stats.total_pup or nil,
		pup_points = stats.pup_points or nil,
		total_quests = stats.total_quests or nil,
		quest_points = stats.quest_points or nil,
		total_gqs = stats.total_gqs or nil,
		gq_points = stats.gq_points or nil,
		total_cps = stats.total_cps or nil,
		cp_points = stats.cp_points or nil,
		join_date = stats.join_date or nil,
		total_days = stats.total_days or nil,
		join_points = stats.join_points or nil
	  }
	)
  end
  
  table.sort(ordered_stats, sort_by_rank)

  return ordered_stats
end

function on_seekrank_all()
  if not update_if_cache_expired('seekrank all') then
	--Reports: Name, Rank, Current Points, Points til next rank for full list
	local ordered_stats = get_ordered_stats()

	-- Set tab total for each column
	-- Name
	local name_tabs = 2
	-- Rank
	local rank_tabs = 2
	-- Rank Points
	local total_points_tabs = 2
	-- Next Rank
	local points_need_tabs = 2

	output_text(
		display_stat("Name", name_tabs, title_color) ..
		display_stat("Rank", rank_tabs, title_color) ..
		display_stat("Rank Points", total_points_tabs, title_color) ..
		display_stat("Next Rank", points_need_tabs, title_color)
	)
	output_text(
		display_stat("----", name_tabs, seperator_color) ..
		display_stat("----", rank_tabs, seperator_color) ..
		display_stat("-----------", total_points_tabs, seperator_color) ..
		display_stat("---------", points_need_tabs, seperator_color)
	)

	for i, stats in ipairs(ordered_stats) do
		-- Note out tab delimited stats using display_stat function
		output_text(
		display_stat(stats.name, name_tabs, name_color) ..
		display_stat(stats.rank, rank_tabs, value_color) ..
		display_stat(stats.rank_points, total_points_tabs, value_color) ..
		display_stat(stats.rank_points_needed, points_need_tabs, value_color)
		)
	end
  end
end

function on_seekrank_playername_parser(name, line, wildcards)
  local playername = wildcards[1]
  if (playername == "all") then
    on_seekrank_all()
	return
  elseif (playername == "help") then
	output_text("@Yseekrank all")
	output_text("Reports: Name, Rank, Current Points, Points til next rank for full list\n")
	output_text("@Yseekrank playername (channel)")
	output_text("Reports: Name, Rank, Current Points, Points til next rank\n")
	output_text("@Yseekrank playername detail (channel)")
	output_text("Reports: Output: Name, Rank, Itemized Points\n")
	output_text("@Yseekrank playername item (channel)")
	output_text("Reports: Name, Rank, Itemized Points and Raw Units\n")
	output_text("@Yseekrank update")
	output_text("Forces a refresh of the Seekers Stats\n")
	output_text("@Yseekrank add <name> <year> <month> <day>")
	output_text("Adds a join date for a player\n")
	return
  elseif (playername == "update") then
	update_stats()
	return
  elseif (playername == "add") then
	if wildcards[2] and wildcards[3] and wildcards[4] and wildcards[5] then
	  if tonumber(wildcards[3]) and tonumber(wildcards[4]) and tonumber(wildcards[5]) then
		local year = tonumber(wildcards[3])
		local month = tonumber(wildcards[4])
		local day = tonumber(wildcards[5])
		local join_date = year .. "-" .. month .. "-" .. day
		join_dates[wildcards[2]] = join_date
		output_text("Added " .. wildcards[2] .. " with join date " .. join_date)
		return
	  end
	end
	output_text("Invalid syntax. Use 'seekrank add <name> <year> <month> <day>' - i.e. 'seekrank add Kindahlin 2024 07 25'")
	return
  end
  local channel = nil
  local type = nil

  if wildcards[2] then
	if wildcards[2] == "d" or wildcards[2] == "detail" then
      type = "detail"
    elseif wildcards[2] == "i" or wildcards[2] == "item" or wildcards[2] == "itemized" then
	  type = "item"
	else
	  channel = wildcards[2]
	end
  else
    on_seekrank_playername(playername)
	return
  end

  if wildcards[3] then
	if channel ~= nil then
	  Note("Unknown options: " .. wildcards[2] .. " " .. wildcards[3])
	  return
	end
	channel = wildcards[3]
  end

  if type == "detail" then
    if channel == nil then
		on_seekrank_playername_detail(playername)
	else
		on_seekrank_playername_detail_channel(playername, channel)
	end
  elseif type == "item" then
    if channel == nil then
	  on_seekrank_playername_item_detail(playername)
	else
	  on_seekrank_playername_item_detail_channel(playername, channel)
	end
  else
	on_seekrank_playername_channel(playername, channel)
  end
end

function on_seekrank_playername(playername)
  if not update_if_cache_expired('seekrank ' .. playername) then
    output_seekrank_playername_channel(playername)
  end
end

function on_seekrank_playername_channel(playername, channel)
  if not update_if_cache_expired('seekrank ' .. playername .. ' ' .. channel) then
    output_seekrank_playername_channel(playername, channel)
  end
end

function output_seekrank_playername_channel(name, channel)
  local stats = seeker_stats[name]
  if not stats then
    output_text("Player not found.")
	return
  end
  output_text(
	name_color .. name .. default_color .. ', ' .. 
	stat_color .. stats.rank .. default_color .. ', ' ..
	stat_color .. 'Current: ' .. value_color .. stats.rank_points .. default_color .. ', ' ..
	stat_color .. 'Next Rank: ' .. value_color .. stats.rank_points_needed .. default_color, channel)
end

function on_seekrank_playername_detail(playername)
  if not update_if_cache_expired('seekrank ' .. playername .. ' detail') then
	output_seekrank_playername_detail_channel(playername)
  end
end

function on_seekrank_playername_detail_channel(playername, channel)
  if not update_if_cache_expired('seekrank ' .. playername .. ' detail ' .. channel) then
	output_seekrank_playername_detail_channel(playername, channel)
  end
end

function output_seekrank_playername_detail_channel(playername, channel)
  local stats = seeker_stats[playername]
  if not stats then
    output_text("Player not found.")
	return
  end
  output_text(
	name_color .. playername .. default_color .. ', ' .. 
	stat_color .. stats.rank .. '(' .. value_color .. stats.rank_points .. stat_color .. ') - ' ..
	stat_color .. 'Points for Levels(' .. value_color .. stats.level_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'CPs(' .. value_color .. stats.cp_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'GQs(' .. value_color .. stats.gq_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Quests(' .. value_color .. stats.quest_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Explored(' .. value_color .. stats.explored_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Days Clanned(' .. value_color .. stats.join_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Pups(' .. value_color .. stats.pup_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Gold Donated(' .. value_color .. stats.gold_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'QP Donated(' .. value_color .. stats.qp_points .. stat_color .. ')', channel)
end

function on_seekrank_playername_item_detail(playername)
  if not update_if_cache_expired('seekrank ' .. playername .. ' itemized') then
    output_seekrank_playername_item_detail_channel(playername)
  end
end

function on_seekrank_playername_item_detail_channel(playername, channel)
  if not update_if_cache_expired('seekrank ' .. playername .. ' itemized ' .. channel) then
    output_seekrank_playername_item_detail_channel(playername, channel)
  end
end

function output_seekrank_playername_item_detail_channel(playername, channel)
  local stats = seeker_stats[playername]
  if not stats then
    output_text("Player not found.")
	return
  end
  output_text(
	name_color .. playername .. default_color .. ', ' .. 
	stat_color .. stats.rank .. '(' .. value_color .. stats.rank_points .. stat_color .. ') - ' ..
	stat_color .. 'Levels(' .. value_color .. stats.total_levels .. stat_color .. '|' .. value_color .. stats.level_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'CPs(' .. value_color .. stats.total_cps .. stat_color .. '|' .. value_color .. stats.cp_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'GQs(' .. value_color .. stats.total_gqs .. stat_color .. '|' .. value_color .. stats.gq_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Quests(' .. value_color .. stats.total_quests .. stat_color .. '|' .. value_color .. stats.quest_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Explored(' .. value_color .. stats.explored_percent .. stat_color .. '|' .. value_color .. stats.explored_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Days Clanned(' .. value_color .. stats.total_days .. stat_color .. '|' .. value_color .. stats.join_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Pups(' .. value_color .. stats.total_pup .. stat_color .. '|' .. value_color .. stats.pup_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'Gold Donated(' .. value_color .. stats.gold .. stat_color .. '|' .. value_color .. stats.gold_points .. stat_color .. ')' .. default_color .. ', ' ..
	stat_color .. 'QP Donated(' .. value_color .. stats.qp_donated .. stat_color .. '|' .. value_color .. stats.qp_points .. stat_color .. ')', channel)
end

function update_stats()
	Note("Updating Seekers Stats")
	EnableTriggerGroup("seekers_triggers", 1)
	SendNoEcho("prompt")
	SendNoEcho("compact")
	SendNoEcho("echo {seekers_donated}")
	SendNoEcho("roster seekers 7")
	SendNoEcho("echo {/seekers_donated}")
	SendNoEcho("echo {seekers_explored}")
	SendNoEcho("rank seekers 15")
	SendNoEcho("echo {/seekers_explored}")
	SendNoEcho("echo {seekers_powerups}")
	SendNoEcho("rank seekers 16")
	SendNoEcho("echo {/seekers_powerups}")
	SendNoEcho("echo {seekers_quests}")
	SendNoEcho("rank seekers 6")
	SendNoEcho("compact")
	SendNoEcho("prompt")
	SendNoEcho("echo {/seekers_quests}")
	last_updated = os.time()
end

function update_if_cache_expired(command)
  local refreshing = false
  if not last_updated then
    post_refresh_command = command
    refreshing = true
	update_stats()
  else
	local current_time = os.time()
	local time_diff = current_time - last_updated
	if time_diff > 3600 then
      post_refresh_command = command
	  refreshing = true
	  update_stats()
	end
  end
  return refreshing
end

function add_member_stats(name, stat, value)
  if not seeker_stats[name] then
	seeker_stats[name] = {}
  end
  seeker_stats[name][stat] = value
end

function on_donation_capture(name, line, args)
  local name = args.name
  local rank = args.rank
  local gold = args.gold
  local qp_donated = args.qp_donated
  local gold_points = get_gold_points(gold)
  local qp_points = get_qp_points(qp_donated)

  -- Add stats to table
  add_member_stats(name, "rank", rank)
  add_member_stats(name, "gold", gold)
  add_member_stats(name, "qp_donated", qp_donated)
  add_member_stats(name, "gold_points", gold_points)
  add_member_stats(name, "qp_points", qp_points)
end

function on_explored_capture(name, line, args)
  local name = args.name
  local total_levels = args.total_levels
  local explored = args.explored
  local explored_percent = args.explored_percent
  local level_points = get_level_points(total_levels)
  local explored_points = get_explored_points(explored_percent)

  -- Add stats to table
  add_member_stats(name, "total_levels", total_levels)
  add_member_stats(name, "explored_percent", explored_percent)
  add_member_stats(name, "level_points", level_points)
  add_member_stats(name, "explored_points", explored_points)
end

function on_powerups_capture(name, line, args)
  local name = args.name
  local total_qp = args.total_qp
  local total_pup = args.total_pup
  local pup_points = get_pup_points(total_pup)

  -- Add stats to table
  add_member_stats(name, "total_pup", total_pup)
  add_member_stats(name, "pup_points", pup_points)
end

function on_quests_capture(name, line, args)
  local name = args.name
  local total_quests = args.total_quests
  local total_gqs = args.total_gqs
  local total_cps = args.total_cps

  -- Add stats to table
  add_member_stats(name, "total_quests", total_quests)
  add_member_stats(name, "total_gqs", total_gqs)
  add_member_stats(name, "total_cps", total_cps)

  local quest_points = get_quest_points(total_quests)
  local gq_points = get_gq_points(total_gqs)
  local cp_points = get_campaign_points(total_cps)

  add_member_stats(name, "quest_points", quest_points)
  add_member_stats(name, "gq_points", gq_points)
  add_member_stats(name, "cp_points", cp_points)

  add_join_date(name)
  add_rank_points(name)
end

function add_join_date(name)
  local join_date = join_dates[name] or "nil"
  local total_days = get_days_clanned(name)
  local join_points = get_join_points(name)
  add_member_stats(name, "join_date", join_date)
  add_member_stats(name, "total_days", total_days)
  add_member_stats(name, "join_points", join_points)
end

function get_rank_points(name)
  local rank = seeker_stats[name].rank
  local gold = seeker_stats[name].gold
  local qp_donated = seeker_stats[name].qp_donated
  local total_levels = seeker_stats[name].total_levels
  local explored_percent = seeker_stats[name].explored_percent
  local total_pup = seeker_stats[name].total_pup
  local total_quests = seeker_stats[name].total_quests
  local total_gqs = seeker_stats[name].total_gqs
  local total_cps = seeker_stats[name].total_cps
  local gold_points = get_gold_points(gold)
  local qp_points = get_qp_points(qp_donated)
  local level_points = get_level_points(total_levels)
  local explored_points = get_explored_points(explored_percent)
  local pup_points = get_pup_points(total_pup)
  local quest_points = get_quest_points(total_quests)
  local join_points = get_join_points(name)
  local gq_points = get_gq_points(total_gqs)
  local cp_points = get_campaign_points(total_cps)
  return gold_points + qp_points + level_points + explored_points + pup_points + quest_points + gq_points + cp_points + join_points
end

function add_rank_points(name)
  local rank_points = get_rank_points(name)
  local points_for_next = "Max"
  local current_rank = ranks[seeker_stats[name].rank] or 0
  if current_rank < 6 then
    local next_rank = rank_points_needed[current_rank + 1]
	points_for_next = next_rank - rank_points
  end
  add_member_stats(name, "rank_points", rank_points)
  add_member_stats(name, "rank_points_needed", points_for_next)
end

function sort_by_rank(a, b)
  local aval = 0
  if a.rank then
	aval = ranks[a.rank]
  end
  local bval = 0
  if b.rank then
	bval = ranks[b.rank]
  end
  if aval == bval then
    if a.rank_points == nil then return false end
	if b.rank_points == nil then return true end
    return a.rank_points > b.rank_points
  end
  return aval > bval
end

function display_stats()
  local ordered_stats = get_ordered_stats()

  -- Set tab total for each column
  local name_tabs = 2
  local rank_tabs = 2
  local total_points_tabs = 2
  local points_need_tabs = 2
  local total_levels_tabs = 2
  local level_points_tabs = 2
  local total_cps_tabs = 1
  local cp_points_tabs = 2
  local total_gqs_tabs = 1
  local gq_points_tabs = 2
  local total_quests_tabs = 2
  local quest_points_tabs = 2
  local explored_percent_tabs = 2
  local explored_points_tabs = 2
  local join_date_tabs = 2
  local total_days_tabs = 2
  local join_points_tabs = 2
  local total_pup_tabs = 1
  local pup_points_tabs = 2
  local gold_tabs = 3
  local gold_points_tabs = 2
  local qp_donated_tabs = 2
  local qp_points_tabs = 2

  -- Note out a tab delimited header for columns above using display_stat function to determine tabs
  output_text(
	display_stat("Name", name_tabs, title_color) ..
	display_stat("Rank", rank_tabs, title_color) ..
	display_stat("Rank Points", total_points_tabs, title_color) ..
	display_stat("Next Rank", points_need_tabs, title_color) ..
	display_stat("Total Levels", total_levels_tabs, title_color) ..
	display_stat("Level Points", level_points_tabs, title_color) ..
	display_stat("CPs", total_cps_tabs, title_color) ..
	display_stat("CP Points", cp_points_tabs, title_color) ..
	display_stat("GQs", total_gqs_tabs, title_color) ..
	display_stat("GQ Points", gq_points_tabs, title_color) ..
	display_stat("Qs", total_quests_tabs, title_color) ..
	display_stat("Q Points", quest_points_tabs, title_color) ..
	display_stat("% Explored", explored_percent_tabs, title_color) ..
	display_stat("Explored Points", explored_points_tabs, title_color) ..
	display_stat("Join Date", join_date_tabs, title_color) ..
	display_stat("Days Clanned", total_days_tabs, title_color) ..
	display_stat("Join Points", join_points_tabs, title_color) ..
	display_stat("Pups", total_pup_tabs, title_color) ..
	display_stat("Pup Points", pup_points_tabs, title_color) ..
	display_stat("Gold Donated", gold_tabs, title_color) ..
	display_stat("Gold Points", gold_points_tabs, title_color) ..
	display_stat("QP Donated", qp_donated_tabs, title_color) ..
	display_stat("QP Points", qp_points_tabs, title_color) .. "\n"
  )

  for i, stats in ipairs(ordered_stats) do
	-- Note out tab delimited stats using display_stat function
	output_text(
	  display_stat(stats.name, name_tabs, name_color) ..
	  display_stat(stats.rank, rank_tabs, value_color) ..
	  display_stat(stats.rank_points, total_points_tabs, value_color) ..
	  display_stat(stats.rank_points_needed, points_need_tabs, value_color) ..
	  display_stat(stats.total_levels, total_levels_tabs, value_color) ..
	  display_stat(stats.level_points, level_points_tabs, value_color) ..
	  display_stat(stats.total_cps, total_cps_tabs, value_color) ..
	  display_stat(stats.cp_points, cp_points_tabs, value_color) ..
	  display_stat(stats.total_gqs, total_gqs_tabs, value_color) ..
	  display_stat(stats.gq_points, gq_points_tabs, value_color) ..
	  display_stat(stats.total_quests, total_quests_tabs, value_color) ..
	  display_stat(stats.quest_points, quest_points_tabs, value_color) ..
	  display_stat(stats.explored_percent, explored_percent_tabs, value_color) ..
	  display_stat(stats.explored_points, explored_points_tabs, value_color) ..
	  display_stat(stats.join_date, join_date_tabs, value_color) ..
	  display_stat(stats.total_days, total_days_tabs, value_color) ..
	  display_stat(stats.join_points, join_points_tabs, value_color) ..
	  display_stat(stats.total_pup, total_pup_tabs, value_color) ..
	  display_stat(stats.pup_points, pup_points_tabs, value_color) ..
	  display_stat(stats.gold, gold_tabs, value_color) ..
	  display_stat(stats.gold_points, gold_points_tabs, value_color) ..
	  display_stat(stats.qp_donated, qp_donated_tabs, value_color) ..
	  display_stat(stats.qp_points, qp_points_tabs, value_color)
	)
  end
end

function output_text(text, channel)
  if channel == nil then
    AnsiNote( ColoursToANSI( text ) )
  else
    SendNoEcho( channel .. ' ' .. text )
  end
end

-- Determine how many tabs worth of space the value takes up and subtract them from the total and output the string + tabs
function display_stat(value, total_tabs, color)
  if not value then value = "nil" end
  value = tostring(value)
  local value_len = string.len(value)
  -- calculate tab length by dividing the value length by 8
  local value_tabs = math.floor(value_len / 8)
  local tabs = total_tabs - value_tabs
  local tab_str = ""
  for i = 1, tabs do
	tab_str = tab_str .. "\t"
  end
  if color then
	return color .. value .. default_color .. tab_str
  end
  return value .. tab_str
end

function get_gold_points(gold)
-- Strip commas from gold
  gold = gold or "0"
  local stripped = string.gsub(gold, ",", "")
  gold = tonumber(stripped) or 0
  return math.floor(gold / 200000)
end

function get_level_points(levels)
  levels = tonumber(levels) or 0
  return math.floor(levels / 10)
end

function get_campaign_points(cps)
  cps = tonumber(cps) or 0
  return math.floor(cps * 2 / 5)
end

function get_gq_points(gqs)
  gqs = tonumber(gqs) or 0
  return gqs
end

function get_quest_points(quests)
  quests = tonumber(quests) or 0
  return math.floor(quests / 20)
end

function get_explored_points(explored)
  explored = tonumber(explored) or 0

  if explored > 99.5 then
	return math.floor(explored*10)
  elseif explored > 99 then
    return math.floor(explored*8.5)
  elseif explored > 98 then
    return math.floor(explored*7)
  elseif explored > 95 then
    return math.floor(explored*5)
  elseif explored > 90 then
    return math.floor(explored*4)
  elseif explored > 75 then
    return math.floor(explored*0.75)
  elseif explored > 50 then
	return math.floor(explored*0.5)
  elseif explored > 25 then
	return math.floor(explored*0.25)
  else
	return 0
  end
end

function get_pup_points(pup)
  pup = tonumber(pup) or 0
  return math.floor(pup / 5)
end

function get_qp_points(qp)
  qp = tonumber(qp) or 0
  return math.floor(qp / 15)
end

function get_days_clanned(name)
  local join_date = join_dates[name] or nil
  if not join_date then
	return 0
  end
  local year, month, day = join_date:match("(%d+)-(%d+)-(%d+)")
  local join_time = os.time({year=year, month=month, day=day})
  local current_time = os.time()
  local time_diff = current_time - join_time
  return math.floor(time_diff / 86400)
end

function get_join_points(name)
  local join_date = join_dates[name] or nil
  if not join_date then return 0 end
  local year, month, day = join_date:match("(%d+)-(%d+)-(%d+)")
  local join_time = os.time({year=year, month=month, day=day})
  local current_time = os.time()
  local time_diff = current_time - join_time
  local days = math.floor(time_diff / 86400)
  return math.floor(days / 7)
end

function OnPluginInstall ()
  require "serialize"  -- needed to serialize table to string

  assert (loadstring (GetVariable ("join_dates") or "")) ()
end

function OnPluginSaveState ()
  SetVariable ("join_dates", serialize.save ("join_dates"))
end

]]>
</script>
</muclient>
